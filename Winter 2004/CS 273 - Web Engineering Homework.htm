<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0049)http://emp.byui.edu/twitchellk/cs273Homework.html -->
<HTML><HEAD><TITLE>CS 273 - Web Engineering Homework</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<META content="MSHTML 6.00.2800.1400" name=GENERATOR></HEAD>
<BODY>
<H2>CS 273 - Web Engineering<BR>Homework<BR>
<HR>
</H2>
<P><FONT size=-1><A 
href="http://emp.byui.edu/twitchellk/cs273Homework.html#00">00</A> | <A 
href="http://emp.byui.edu/twitchellk/cs273Homework.html#01">01</A> | <A 
href="http://emp.byui.edu/twitchellk/cs273Homework.html#02">02</A> | <A 
href="http://emp.byui.edu/twitchellk/cs273Homework.html#03">03</A> | <A 
href="http://emp.byui.edu/twitchellk/cs273Homework.html#04">04</A> | <A 
href="http://emp.byui.edu/twitchellk/cs273Homework.html#05">05</A> | <A 
href="http://emp.byui.edu/twitchellk/cs273Homework.html#06">06</A> | <A 
href="http://emp.byui.edu/twitchellk/cs273Homework.html#07">07</A> | <A 
href="http://emp.byui.edu/twitchellk/cs273Homework.html#08">08</A> | <A 
href="http://emp.byui.edu/twitchellk/cs273Homework.html#09">09</A> | <A 
href="http://emp.byui.edu/twitchellk/cs273Homework.html#10">10</A> | <A 
href="http://emp.byui.edu/twitchellk/cs273Homework.html#11">11</A> | <A 
href="http://emp.byui.edu/twitchellk/cs273Homework.html#12">12</A> | <A 
href="http://emp.byui.edu/twitchellk/cs273Homework.html#13">13</A> | <A 
href="http://emp.byui.edu/twitchellk/cs273Homework.html#14">14</A> | <A 
href="http://emp.byui.edu/twitchellk/cs273Homework.html#15">15</A> | <A 
href="http://emp.byui.edu/twitchellk/cs273Homework.html#16">16</A> | <A 
href="http://emp.byui.edu/twitchellk/cs273Homework.html#17">17</A> | <A 
href="http://emp.byui.edu/twitchellk/cs273Homework.html#18">18</A> | <A 
href="http://emp.byui.edu/twitchellk/cs273Homework.html#19">19</A> </FONT>
<H4>General Instructions</H4>
<UL>
  <LI>Make sure your Web pages and programs display/function correctly using 
  Mozilla <B>and</B> Internet Explorer. Grading is done using Mozilla on a 
  Windows PC. 
  <LI>CGI programming assignments shall execute using jordan.byui.edu as the Web 
  server. 
  <LI>All assignments except 00 shall be submitted by copying files to 
  /home/twitchellk/cs273/hw##/, where ## is the two-digit homework number (be 
  sure to include leading zeros when necessary). It is best to use <B>submit</B> 
  to submit your homework. Submit-compatible template files are located at 
  /home/twitchellk/examples/style/. Examples where <I>whateverYouNamedIt</I> is 
  your file to be submitted and <I>xyz99001</I> is your user ID): 
  <UL>
    <LI>submit whatever.txt 
    <LI>submit whatever.html 
    <LI>submit whatever.pl </LI></UL>
  <LI>All assignments shall be submitted as ASCII text files. An assignment that 
  is resubmitted because the file is not an ASCII text file is subject to late 
  penalties. 
  <LI>Do <I>not</I> use absolute path names in your CGI (Perl) scripts; always 
  use relative path names. 
  <LI>Except for homework <A 
  href="http://emp.byui.edu/twitchellk/cs273Homework.html#12">12</A>, submit 
  <B>only one file</B> for each homework assignment. 
  <LI>Each file name shall include an appropriate extension (.html for HTML, .pl 
  for Perl, and .txt for text). 
  <LI>Do <I>not</I> link to any files in your directories; link only to 
  submitted files. 
  <LI>Homework shall not be submitted using e-mail or diskette (or anything like 
  unto it). 
  <LI>Make sure your submitted program satisfies all specified requirements 
  (with exactness, see Alma 57:21). 
  <LI>All programs shall include error handling, shall execute without run-time 
  errors, and shall terminate gracefully. 
  <LI>Each line in each file, regardless of type, shall be less than 80 
  characters long <I>(except for long URLs)</I>. 
  <LI>You may <B>not</B> use Microsoft Front Page or any Perl modules. 
  <LI>Web pages shall not contain any of the following: 
  <UL>
    <LI>Frames 
    <LI>Blinking text 
    <LI>Non-terminating animated GIFs 
    <LI>Scrolling text/marquees 
    <LI>Non-standard link colors </LI></UL></LI></UL>
<HR>

<TABLE>
  <TBODY>
  <TR vAlign=top>
    <TD><A name=00><FONT size=+3><B>00</B></FONT></A> </TD>
    <TD><FONT size=+1><B>Scriptures in Class</B></FONT><BR><I>40 points</I> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp; Each class shall start with at least one 
      brief presentation of a scripture. You are required to present <B>two</B> 
      scriptures from the Standard Works during the semester. Each scripture 
      (one or more verses) shall be pertinent to our class, to our course of 
      study, or to life at Brigham Young University-Idaho. Just as Nephi, you 
      are encouraged to "liken all scriptures unto us" (1 Nephi 19:23). Each 
      scripture shall be one that has not been presented before in this class. 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp; You will be penalized for presenting a 
      duplicate scripture. Please note that the start of class is not delayed to 
      wait for you or your scripture. If you are late to class or unprepared on 
      your assigned day, you will not deliver a scripture on that day. The 
      standard late penalty applies each time you are scheduled to provide a 
      scripture but do not. <BR>&nbsp;&nbsp;&nbsp;&nbsp; Information to help you 
      successfully complete this homework assignment is available at <A 
      href="http://157.201.194.254/cgi-bin/twitchellk/scriptures/studentTracker.pl?class=CS273">http://157.201.194.254/cgi-bin/twitchellk/scriptures/studentTracker.pl?class=CS273</A> 
      <I>(on campus only)</I>. 
      <P></P></TD></TR>
  <TR vAlign=top>
    <TD><A name=01><FONT size=+3><B>01</B></FONT></A> </TD>
    <TD><FONT size=+1><B>Now Presenting</B></FONT><BR><I>100 points</I> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp; Prepare a 7-9 minute <A 
      href="http://emp.byui.edu/twitchellk/presentation.html">professional 
      quality presentation</A> on an Internet topic of your choice. The topic 
      must be pre-approved (to avoid duplication) and cannot duplicate any 
      material covered in this class. <BR>&nbsp;&nbsp;&nbsp;&nbsp; Sample 
      topics: FTP, gopher, telnet (particularly secure shell), ping and other 
      Internet utilities, DNS, streaming audio/video, freedom of speech, 
      privacy, security, search engines, ASP, .NET, Java applets, graphic 
      formats (such as JPEG, GIF, and PNG), and the many aspects of electronic 
      commerce. <BR>&nbsp;&nbsp;&nbsp;&nbsp; Since the presentations will be 
      made in a random order, you should be prepared to present on the first day 
      scheduled for presentations. If you are not prepared, a 50% late penalty 
      will be applied. <BR>&nbsp;&nbsp;&nbsp;&nbsp; Submit, as a text file, two 
      potential test questions, with answers, relevant to your presentation. 
      Note that these are questions for a test, not Trivial Pursuit<SUP>®</SUP>. 
      Each question shall be multiple choice providing at least three choices 
      and at most four choices. None of the choices shall be obviously 
      incorrect. 
      <P></P></TD></TR>
  <TR vAlign=top>
    <TD><A name=02><FONT size=+3><B>02</B></FONT></A> </TD>
    <TD><FONT size=+1><B>Internet and Web Jargon</B></FONT><BR><I>100 
      points</I> <BR>&nbsp;&nbsp;&nbsp;&nbsp; Expand acronyms, if appropriate, 
      and <I>briefly</I> define the following terms (as they relate to the 
      Internet). State the source(s) of your definitions. Submit as a text file. 

      <OL>
        <LI>applet 
        <LI>CGI 
        <LI>client 
        <LI>DHTML 
        <LI>DNS 
        <LI>ethernet 
        <LI>FTP 
        <LI>gopher 
        <LI>HTML 
        <LI>HTTP 
        <LI>IP address 
        <LI>MIME 
        <LI>ping 
        <LI>router 
        <LI>SSL 
        <LI>SGML 
        <LI>server 
        <LI>servlet 
        <LI>T1 
        <LI>TCP/IP 
        <LI>telnet <I>(this is also an acronym)</I> 
        <LI>traceroute 
        <LI>W3C 
        <LI>XHTML 
        <LI>XML </LI></OL></TD></TR>
  <TR vAlign=top>
    <TD><A name=03><FONT size=+3><B>03</B></FONT></A> </TD>
    <TD><FONT size=+1><B>IP Address Shortage</B></FONT><BR><I>100 points</I> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp; The current IP addressing scheme should be 
      able to address approximately 4.3 billion (4,294,967,296) computers. The 
      total number of computers in the world today is probably in the hundreds 
      of millions and a significant portion of these are not connected to the 
      Internet. Even though there are far fewer than 4.3 billion computers in 
      the world -- and there may never be that many computers -- we may run out 
      of IP addresses within the next few years. Answer the following questions; 
      submit as a text file. 
      <OL>
        <LI>Why will we run out of IP addresses? 
        <LI>What has been done to solve this problem?<BR>Include a discussion of 
        IPv6, CIDR, and NAT. 
        <LI>What are the advantages of each of these solutions? 
        <LI>What are the disadvantages of each of these solutions? 
        <LI>Do you think any of these solutions will be implemented within the 
        next few years?<BR>Why or why not? </LI></OL></TD></TR>
  <TR vAlign=top>
    <TD><A name=04><FONT size=+3><B>04</B></FONT></A> </TD>
    <TD><FONT size=+1><B>HTML Hello World!</B></FONT><BR><I>25 points</I> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp; Create an HTML page that displays, at a 
      minimum, the following: 
      <UL>
        <LI>a title of "Hello World!" in the browser title bar 
        <LI>the text "Hello World!" as the heading of the web page (use larger 
        text for the heading) 
        <LI>your name 
        <LI>your major 
        <LI>where you are from </LI></UL>Test your page by placing the html file 
      in a directory named public_html. Use mkdir to create the directory. Your 
      public_html directory must be in your home directory. Your public_html 
      <B>and</B> home directories must have permissions of 755 (rwxr-xr-x). Use 
      chmod to set permissions. The URL for your page is 
      http://157.201.194.254/~yourUserID/yourFileName.html where yourUserID is 
      the user ID you use to log in to lab computers and yourFileName is the 
      name you gave to your html file. 
      <P></P></TD></TR>
  <TR vAlign=top>
    <TD><A name=05><FONT size=+3><B>05</B></FONT></A> </TD>
    <TD><FONT size=+1><B>Hello World! Form</B></FONT><BR><I>25 
      points</I><BR>&nbsp;&nbsp;&nbsp;&nbsp; Create an HTML form with a single 
      text field and four buttons. Functionality is required in homework <A 
      href="http://emp.byui.edu/twitchellk/cs273Homework.html#15">15</A>. The 
      text field shall contain the text "Hello World!" One button is a reset 
      button and shall be labeled "Hello World!" The other three buttons are 
      JavaScript buttons and shall be labeled "My Name", "My Major", and "Where 
      I am From".<BR>&nbsp;&nbsp;&nbsp;&nbsp; Include a title of "Hello World!" 
      in the browser title bar <B>and</B> the text "Hello World!" as the heading 
      of the web page (use larger text for the page heading). 
      <P></P></TD></TR>
  <TR vAlign=top>
    <TD><A name=06><FONT size=+3><B>06</B></FONT></A> </TD>
    <TD><FONT size=+1><B>CGI (and Perl) Hello World!</B></FONT><BR><I>50 
      points</I> <BR>&nbsp;&nbsp;&nbsp;&nbsp; Create a Perl script that creates 
      an HTML page that includes, at a minimum, the same information required 
      for homework <A 
      href="http://emp.byui.edu/twitchellk/cs273Homework.html#04">04</A>. 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp; Using mkdir, create a directory named cgi-bin 
      in your home directory. Set the permissions of this directory to be the 
      same as your public_html directory (see homework <A 
      href="http://emp.byui.edu/twitchellk/cs273Homework.html#04">04</A>). 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp; Test your CGI Perl script using the following 
      URL: 
      <UL>
        <LI>http://157.201.194.254/cgi-bin/yourUserID/whateverYouNamedIt.pl 
      </LI></UL></TD></TR>
  <TR vAlign=top>
    <TD><A name=07><FONT size=+3><B>07</B></FONT></A> </TD>
    <TD><FONT size=+1><B>Change Maker</B></FONT><BR><I>75 
      points</I><BR>&nbsp;&nbsp;&nbsp;&nbsp; Write a CGI Perl script that 
      accepts a non-negative integer less than or equal to 100 (e.g., 59). The 
      input value shall be part of the URL <I>(e.g., 
      http://157.201.194.254/cgi-bin/.../whatever.pl?59)</I> and will be 
      available to your Perl script in $ENV{'QUERY_STRING'}. This is an element 
      in a hash; use it as you would a variable.<BR>&nbsp;&nbsp;&nbsp;&nbsp; 
      Assume the value entered by the user is the cost of something. Calculate 
      the change from $1 (100). Determine the least number of coins (quarters, 
      dimes, nickels, and pennies) to be used as 
      change.<BR>&nbsp;&nbsp;&nbsp;&nbsp; Create a <B>plain text</B> 
      <I>(Content-type: text/plain)</I> page containing your output. Output 
      shall include the value input by the user and the change as quantities of 
      quarters, dimes, nickels, and pennies. If the input was 59, the output 
      is<BR>
      <TABLE border=1>
        <TBODY>
        <TR>
          <TD>The item cost 59 cents.<BR>Your change includes 1 quarter(s), 1 
            dime(s), 1 nickel(s), and 1 penny(ies). 
      </TD></TR></TBODY></TABLE>&nbsp;&nbsp;&nbsp;&nbsp; You may not use any 
      conditionals or loops. Assume user input is valid. 
      <P></P></TD></TR>
  <TR vAlign=top>
    <TD><A name=08><FONT size=+3><B>08</B></FONT></A> </TD>
    <TD><FONT size=+1><B>Vending Machine</B></FONT><BR><I>150 points</I> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp; Modify homework <A 
      href="http://emp.byui.edu/twitchellk/cs273Homework.html#07">07</A> to 
      accept a grid location (such as C5) in a vending machine rather than the 
      price of an item. The vending machine is filled with items priced as 
      specified in <A 
      href="http://emp.byui.edu/twitchellk/vm.txt">/home/twitchellk/examples/vm.txt</A>. 

      <UL>
        <LI>Assume that the customer has already successfully supplied $1 to the 
        machine. 
        <LI>Allow for both upper and lower case input (i.e. C5 and c5 are both 
        valid). 
        <LI>Assume the user's input is limited to two characters. 
        <LI>You may not assume valid user input. 
        <LI>If the input is reversed, such as 5C, output a message as shown in 
        the example and process the input as if it was in the correct order 
        (i.e., C5). <I>Hint: consider split and join.</I> 
        <LI>If either the letter or the number of the input is out of range, 
        output an error message as shown in the example. 
        <LI>If the grid location is empty, output an error message as shown in 
        the example. 
        <LI>You do not need to output the vending machine grid. 
        <LI>Deliver the correct amount of change using the least number 
        quarters, dimes, and nickels. There are <B>no</B> pennies! 
      </LI></UL>&nbsp;&nbsp;&nbsp;&nbsp; Example (user input URL is shown in 
      <B>bold</B>): <PRE>   <B>http://157.201.194.254/cgi-bin/.../whatever.pl?C5</B>
   Item C5 costs 60 cents.
   Change is 1 quarter(s), 1 dime(s), and 1 nickel(s).
   <B>http://157.201.194.254/cgi-bin/.../whatever.pl?5C</B>
   Input of 5C is being processed as C5.
   Item C5 costs 60 cents.
   Change is 1 quarter(s), 1 dime(s), and 1 nickel(s).
   <B>http://157.201.194.254/cgi-bin/.../whatever.pl?2b</B>
   Input of 2B is being processed as B2.
   Item B2 costs 10 cents.
   Change is 3 quarter(s), 1 dime(s), and 1 nickel(s).
   <B>http://157.201.194.254/cgi-bin/.../whatever.pl?oo</B>
   Input error: letter range is A-E, number range is 1-5.
   <B>http://157.201.194.254/cgi-bin/.../whatever.pl?R3</B>
   Input error: letter range is A-E, number range is 1-5.
   <B>http://157.201.194.254/cgi-bin/.../whatever.pl?D9</B>
   Input error: letter range is A-E, number range is 1-5.
   <B>http://157.201.194.254/cgi-bin/.../whatever.pl?AD</B>
   Input error: letter range is A-E, number range is 1-5.
   <B>http://157.201.194.254/cgi-bin/.../whatever.pl?9P</B>
   Input of 9P is being processed as P9.
   Input error: letter range is A-E, number range is 1-5.
   <B>http://157.201.194.254/cgi-bin/.../whatever.pl?51</B>
   Input of 51 is being processed as 15.
   Input error: letter range is A-E, number range is 1-5.
   <B>http://157.201.194.254/cgi-bin/.../whatever.pl?B4</B>
   Invalid selection: B4 is empty.
</PRE></TD></TR>
  <TR vAlign=top>
    <TD><A name=09><FONT size=+3><B>09</B></FONT></A> </TD>
    <TD><FONT size=+1><B>CGI Environment Variables</B></FONT><BR><I>100 
      points</I><BR>&nbsp;&nbsp;&nbsp;&nbsp; Create a CGI Perl script that 
      generates an HTML document containing a single HTML form with two submit 
      buttons.<BR>&nbsp;&nbsp;&nbsp;&nbsp; When the user clicks the submit 
      button labeled "Show Environment Variables", the same CGI Perl script 
      generates a dynamic HTML document listing all environment variables and 
      their values, formatted as a table. Output an appropriate title, page 
      header, and column headers. The environment variables shall be output in 
      ascending alphabetical order.<BR>&nbsp;&nbsp;&nbsp;&nbsp; When the user 
      clicks the submit button labeled "Show Perl Script", the same Perl CGI 
      script displays itself as a plain text document. You may not "hard code" 
      any path or file names into your Perl script; however, you may use 
      environment variables to determine the name and location of your Perl 
      script.<BR>&nbsp;&nbsp;&nbsp;&nbsp; Sample code for opening and reading a 
      file is located at <A 
      href="http://emp.byui.edu/twitchellk/file.txt">/home/twitchellk/examples/file.pl</A>. 
      You may want to use the code contained in <A 
      href="http://emp.byui.edu/twitchellk/read.txt">/home/twitchellk/examples/read.pl</A> 
      to process data from the HTML form. 
      <P></P></TD></TR>
  <TR vAlign=top>
    <TD><A name=10><FONT size=+3><B>10</B></FONT></A> </TD>
    <TD><FONT size=+1><B>File List</B></FONT><BR><I>100 
      points</I><BR>&nbsp;&nbsp;&nbsp;&nbsp; Create a CGI Perl script that lists 
      file names and information about all of the text (.txt) files in the 
      parent directory. Your solution shall not include the use of regular 
      expressions. Format the data in a table. Output an appropriate title, page 
      header, and column headers. Organize your output as follows (clearly label 
      and separate the three groups): 
      <OL>
        <LI>all text (.txt) files with a name of three characters in ascending 
        sort order 
        <LI>all text (.txt) files with a name of four characters in ascending 
        sort order 
        <LI>all other text (.txt) files in ascending sort order </LI></OL>For each 
      file name, provide the following information: 
      <UL>
        <LI>plain file or directory 
        <LI>size (in bytes) 
        <LI>permission (rwx) - if the permission is not set, output a hyphen (-) 

        <LI>number of days since last modification, to one decimal place 
    </LI></UL></TD></TR>
  <TR vAlign=top>
    <TD><A name=11><FONT size=+3><B>11</B></FONT></A> </TD>
    <TD><FONT size=+1><B>Credit Tally</B></FONT><BR><I>125 points</I> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp; Create a CGI Perl script that displays a list 
      of student names (use &lt;SELECT&gt;). The names shall come from four 
      digit text files located in the parent directory. These files contain the 
      student's name in the first line and the student's transcript in the rest 
      of the file. When the user selects a name and clicks on an appropriately 
      labeled button, the same CGI Perl script reports the number of credits 
      that the student has earned. Note that classes with a grade of "F" or "W" 
      are not included in the total. <BR>&nbsp;&nbsp;&nbsp;&nbsp; A repeated 
      class replaces the previous class, both for grade and number of credits 
      earned. 
      <P></P></TD></TR>
  <TR vAlign=top>
    <TD><A name=12><FONT size=+3><B>12</B></FONT></A> </TD>
    <TD><FONT size=+1><B>Graduation Progress Report</B></FONT><BR><I>900 
      points</I> <BR>&nbsp;&nbsp;&nbsp;&nbsp; Create a CGI application, 
      consisting of Perl script(s) and data file(s), that generates a graduation 
      progress report for any (available) student with any (defined) major and 
      any (defined) minor. The report shall match the format and provide the 
      information specified in the following sample output files: 
      <UL>
        <LI><A 
        href="http://emp.byui.edu/twitchellk/cs273AgrippaPaul.html">Agrippa, 
        Paul - specialized major</A> 
        <LI><A 
        href="http://emp.byui.edu/twitchellk/cs273AquliaPriscilla.html">Aqulia, 
        Priscilla - integrated major with emphasis and minor</A> 
        <LI><A 
        href="http://emp.byui.edu/twitchellk/cs273EphesusJohn.html">Ephesus, 
        John - integrated major and minor</A> 
        <LI><A 
        href="http://emp.byui.edu/twitchellk/cs273EphesusRoman.html">Ephesus, 
        Roman - integrated major and minor</A> 
        <LI><A 
        href="http://emp.byui.edu/twitchellk/cs273GalatiaMark.html">Galatia, 
        Mark - specialized major</A> 
        <LI><A 
        href="http://emp.byui.edu/twitchellk/cs273LaodiceaLuke.html">Laodicea, 
        Luke - integrated major and minor</A> 
        <LI><A 
        href="http://emp.byui.edu/twitchellk/cs273SilvanusSimon.html">Silvanus, 
        Simon - specialized major</A> </LI></UL>Please note the following: 
      <OL>
        <LI>Use the 2003-2004 catalog. You are, at a minimum, required to be as 
        accurate and efficient as the 2003-2004 catalog. You are permitted to be 
        more efficient. 
        <LI>Assume students start as freshmen with zero credits in Fall 2003. 
        You do not need to make provision for AP and transfer credit. 
        <LI>The minimum number of credits required for graduation shall be input 
        from a data file. This number is the same for BS and BA degrees. 
        <LI>The total number of earned credits is calculated from classes 
        completed with a passing grade (exclude "F" and "W"). 
        <LI>You are not required to process incompletes. 
        <LI>Provide the capability to process majors and minors. You do not need 
        to make provision for clusters. 
        <LI>Do not duplicate data in your data file(s)! (Unless, of course, the 
        catalog duplicates data -- see number 1 above.) 
        <LI>Most majors dictate which general education classes the student 
        should take; use what the major requires (i.e., major requirements 
        supercede general education requirements). 
        <UL>
          <LI>CS 144 satisfies the Basic Skills general education requirement 
          for Applied Mathematics majors. CS 273 does the same for Computer 
          Science majors. 
          <LI>ID 380 and FA 100 satisfy the Arts general education requirement 
          for Interior Design majors. </LI></UL>
        <LI>Your name shall appear on the output. 
        <LI>Do not leave any cell in the output empty. Use "none," "completed," 
        or "n/a" as appropriate. 
        <LI>Once a general education requirement is satisfied, no additional 
        classes should appear in that general education section. If there are 
        additional classes in that general education category that are required 
        by the major or minor, they should be listed in the "Major" or "Minor" 
        row ("Classes Taken" or "Classes to Take" column). 
        <LI>Classes that are not required for graduation shall appear in the 
        "Other Classes" row. 
        <LI>Provide the capability to process something as complex as the 
        Computer Science major physical science requirement: (Chem 105 
        &amp;&amp; Chem 106) || (Geol 111 &amp;&amp; Geol 111L &amp;&amp; Geol 
        112 &amp;&amp; Geol 112L) || (Ph 121 &amp;&amp; Ph 150 &amp;&amp; Ph 220 
        &amp;&amp; Ph 250). Remember that the first half of each set of classes 
        satisfies the physical science general education requirement and the 
        second half satisfies a major requirement. 
        <LI>Use the same transcript files as in homework <A 
        href="http://emp.byui.edu/twitchellk/cs273Homework.html#11">11</A>. 
        <LI>Use the section number (800-899) to determine if a course satisfies 
        the on-line learning requirement. 
        <LI>You do not need to make provision for associate's degrees. 
        <LI>Each class that has been taken shall appear in the output exactly 
        once <I>(with the exception of the on-line learning requirement, since a 
        single class can satisfy this and another requirement)</I>. Fill general 
        education and university requirements sections before major and minor 
        sections. 
        <LI>For your software, please note that Information Systems majors 
        cannot "legally" use Econ 112 to satisfy general education requirements. 
        This isn't the way it is in the "real" world. 
        <LI>The Mathematics Education minor (120) states that "Math 111 may NOT 
        be taken after Math 112." You do not need to check for this. However, 
        you still need to allow for the two options associated with Math 440. 
        <LI>The correct number for English majors include 630-11, 630-12, and 
        630-13. 
        <LI>For English majors 630-12 and 635-25, the catalog specifies as part 
        of Requirement 2 to "Choose one pair of courses (6 credits)" and then 
        "Take 2 Courses" (this follows the second "and" in Requirement 2). A 
        total of two classes (six credits) are required for this portion of 
        Requirement 2. 
        <LI>Please note that some requirements are expressed in terms of the 
        number of courses and others are expressed in terms of the number of 
        credits. For example, a student is required to take one course for 
        letters general education and four credits for biological science 
        general education. 
        <LI>Some majors require a minimum grade for their courses. If a student 
        fails to earn the minimum grade, list the class under other classes. For 
        English majors, interpret "min GPA 2.0" as "min grade C." 
        <LI>A major (Applied Mathematics) specifies a class (CS 144) to satisfy 
        a general education requirement (basic skills). A student first takes 
        some other class (Comm 101) that satisfies that general education 
        requirement. Output CS 144 as the sole class that satisfies basic skills 
        general education. Output the other class (Comm 101) under other 
        classes. </LI></OL>&nbsp;&nbsp;&nbsp;&nbsp; You shall provide, at a 
      minimum, the following files as input to your CGI application: 
      <UL>
        <LI>major/minor requirements file(s). A good naming convention is 
        ###.txt or ###-##.txt where ### represents the three digits for that 
        major or minor and -## represents the two digits for the emphasis. The 
        first line shall be the name of the major or minor. At a minimum, 
        provide a file (or files) for the following majors and minors: 
        <UL>
          <LI>Computer Science major (440) 
          <LI>Computer Science minor (147) 
          <LI>Interior Design major (420 and 425) 
          <LI>Applied Mathematics major (650) 
          <LI>Mathematics Education major (850) 
          <LI>Mathematics minor (119) 
          <LI>Mathematics Education minor (120) 
          <LI>Information Systems major (680) 
          <LI>Information Systems minor (157) 
          <LI>English major (635-24, 635-25, 635-26, 835, 838, 630-11, 630-12, 
          630-13, 836, and 830) -- <I>note that a student cannot major in 
          English without an emphasis; do not duplicate data beyond that which 
          the catalog does</I> 
          <LI>English minor (133) 
          <LI>English Education minor (134) 
          <LI>Spanish minor (138) 
          <LI>Spanish Education minor (188) </LI></UL>
        <LI>general education requirements file(s) for both the bachelor of arts 
        and bachelor of science degree programs 
        <LI>university requirements file(s) for religion and on-line learning 
        </LI></UL>&nbsp;&nbsp;&nbsp;&nbsp; The interface shall allow the user to 
      select a student and a major and/or minor for that student. A minor with a 
      specialized major is an error. An integrated major without a minor is an 
      error. List the available students, majors, and minors by name. 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp; The student transcript files shall be located 
      in the parent directory. All files that you provide shall be located in 
      the current directory. <I>Keep it simple and avoid subdirectories!</I> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp; Submit your completed scripts to 
      /home/twitchellk/cs273/hw12/yourUserID/ where yourUserID is your userID. 
      Because you are submitting your homework to a directory, you are not 
      required to name your files using your user ID. Use relative path names 
      (everything is in your directory or in the parent directory). 
      <P></P></TD></TR>
  <TR vAlign=top>
    <TD><A name=13><FONT size=+3><B>13</B></FONT></A> </TD>
    <TD><FONT size=+1><B>The Good, the Bad, and the Ugly</B></FONT><BR><I>120 
      points</I> <BR>&nbsp;&nbsp;&nbsp;&nbsp; Review the <A 
      href="http://www.byui.edu/">BYU-I web site</A> relative to the design 
      principles discussed in class and contained in the <A 
      href="http://emp.byui.edu/twitchellk/cs273Reading.html#usability">reading 
      assignments</A>. Be careful to limit your review to the byui.edu domain 
      (i.e., byui.edu <I>must</I> be part of the URL). 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp; List ten specific <I>unique</I> things done 
      well. <B>Use the following format</B> for each good thing: 
      <UL>
        <LI>Good thing: 
        <LI>Reason it is a good thing: 
        <LI>URL(s): 
        <LI>Rating: </LI></UL>The rating is one to five stars (asterisks). Five 
      stars for exceptionally good and one star for barely good. 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp; List ten specific <I>unique</I> 
      problem/improvement pairs. Improvements are changes that would bring the 
      web page(s) into conformance with the design principles previously 
      referenced. <B>Use the following format</B> for each problem/improvement 
      pair: 
      <UL>
        <LI>Problem: 
        <LI>Reason it is a problem: 
        <LI>Recommended Improvement: 
        <LI>URL(s): 
        <LI>Rating: </LI></UL>The rating is one to five stars. Five stars for a 
      problem that severely impacts usability and one star for a problem that is 
      merely annoying. <BR>&nbsp;&nbsp;&nbsp;&nbsp; List the URL of one page 
      that is ugly. <B>Use the following format</B>: 
      <UL>
        <LI>Ugly Page URL: 
        <LI>Reason it is ugly: </LI></UL>&nbsp;&nbsp;&nbsp;&nbsp; <I>You may not 
      include any URLs used in class.</I> <BR>&nbsp;&nbsp;&nbsp;&nbsp; Submit as 
      a text file. 
      <P></P></TD></TR>
  <TR vAlign=top>
    <TD><A name=14><FONT size=+3><B>14</B></FONT></A> </TD>
    <TD><FONT size=+1><B>Rewrite</B></FONT><BR><I>100 points</I> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp; Rewrite the <A 
      href="http://emp.byui.edu/twitchellk/CSisLong.html">article describing 
      Computer Science</A> using the principles discussed in class and contained 
      in the <A 
      href="http://emp.byui.edu/twitchellk/cs273Reading.html#usability">reading 
      assignments</A>. <BR>&nbsp;&nbsp;&nbsp;&nbsp; Use <A 
      href="http://www.htmlhelp.com/reference/">HTML</A> to provide the 
      necessary formatting. 
      <P></P></TD></TR>
  <TR vAlign=top>
    <TD><A name=15><FONT size=+3><B>15</B></FONT></A> </TD>
    <TD><FONT size=+1><B>JavaScript Buttons Hello World!</B></FONT><BR><I>25 
      points</I><BR>&nbsp;&nbsp;&nbsp;&nbsp; Provide functionality for the HTML 
      form created in homework <A 
      href="http://emp.byui.edu/twitchellk/cs273Homework.html#05">05</A>. 
      <TABLE>
        <TBODY>
        <TR vAlign=bottom>
          <TD><B>When I click<BR>on this button...</B></TD>
          <TD><B>...this is the result</B></TD></TR>
        <TR vAlign=top>
          <TD>My Name</TD>
          <TD>replace the text in the text field with your name</TD></TR>
        <TR vAlign=top>
          <TD>My Major</TD>
          <TD>replace the text in the text field with your major</TD></TR>
        <TR vAlign=top>
          <TD>Where I am From</TD>
          <TD>replace the text in the text field with information regarding 
            where you are from</TD></TR>
        <TR vAlign=top>
          <TD>Hello World!</TD>
          <TD>restore the original text in the text field</TD></TR></TBODY></TABLE>
      <P></P></TD></TR>
  <TR vAlign=top>
    <TD><A name=16><FONT size=+3><B>16</B></FONT></A> </TD>
    <TD><FONT size=+1><B>JavaScript Grades</B></FONT><BR><I>75 
      points</I><BR>&nbsp;&nbsp;&nbsp;&nbsp; Create an HTML form that allows the 
      user to enter a numeric grade, an integer from 0 through 100. Output on 
      the same HTML page the corresponding letter grade using the following 
      grading scale: 
      <P>
      <TABLE>
        <TBODY>
        <TR vAlign=top>
          <TD>
            <UL>
              <LI>A - nineties and one hundred 
              <LI>B - eighties 
              <LI>C - seventies 
              <LI>D - sixties 
              <LI>F - 59 and below </LI></UL></TD>
          <TD>
            <UL>
              <LI>If the final digit is 7-9, output a "+" (e.g., 88 is a 
B+).<BR>
              <LI>If the final digit is 0-2, output a "-" (e.g., 61 is a 
D-).<BR>
              <LI>There is no A+, F+, nor F-. 
      </LI></UL></TD></TR></TBODY></TABLE>&nbsp;&nbsp;&nbsp;&nbsp; Be sure to 
      provide appropriate error messages. Error conditions include: 
      <UL>
        <LI>A number outside of the specified range. 
        <LI>User input that starts with something other than a digit. 
        <LI>No input. </LI></UL></TD></TR>
  <TR vAlign=top>
    <TD><A name=17><FONT size=+3><B>17</B></FONT></A> </TD>
    <TD><FONT size=+1><B>More JavaScript Grades</B></FONT><BR><I>125 
      points</I> <BR>&nbsp;&nbsp;&nbsp;&nbsp; Create an HTML form that allows 
      the user to enter up to eight numeric grades (each an integer from 0 
      through 100). Each numeric grade represents a percentage of a number of 
      possible points. Use the following as the possible number of points: 100, 
      100, 100, 50, 50, 100, 50, and 450 (in this order). For the number of 
      grades entered (eight or less), calculate the total number of points 
      earned and the total number of points possible. 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp; Do not assume that the grades will be entered 
      from first to last (i.e., there may be gaps in data entry). Output on the 
      same HTML page the total number of points earned (do not round or truncate 
      this value), the total number of points possible, the percentage of points 
      earned (this should be a whole number; be sure to round), and the 
      corresponding letter grade (using the scale specified in homework <A 
      href="http://emp.byui.edu/twitchellk/cs273Homework.html#16">16</A>). Only 
      average the grades that have been entered (wherever they have been 
      entered); do not assume that all eight grades have been entered or that 
      they have been entered in consecutive text fields. Provide the same error 
      handling as specified in homework <A 
      href="http://emp.byui.edu/twitchellk/cs273Homework.html#16">16</A>). 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp; If the user enters the following values: 
      <OL>
        <LI>100 
        <LI>0 
        <LI>81 
        <LI>
        <LI>90 
        <LI>
        <LI>
        <LI>79 </LI></OL>the following values should be output to the user: 
      <UL>
        <LI>581.5 for the total number of earned points 
        <LI>800 for the total number of possible points 
        <LI>73% for the average numerical grade 
        <LI>C for the corresponding letter grade </LI></UL></TD></TR>
  <TR vAlign=top>
    <TD><A name=18><FONT size=+3><B>18</B></FONT></A> </TD>
    <TD><FONT size=+1><B>Persistence</B></FONT><BR><I>75 
      points</I><BR>&nbsp;&nbsp;&nbsp;&nbsp; Modify your program for homework <A 
      href="http://emp.byui.edu/twitchellk/cs273Homework.html#17">17</A> to 
      automatically save the entered data as a cookie and automatically retrieve 
      the cookie so the user does not have to enter data again. All text fields 
      should be empty the first time the page is accessed and there shouldn't be 
      any JavaScript errors. You may use one cookie; the name for the cookie is 
      your user ID. 
      <P></P></TD></TR>
  <TR vAlign=top>
    <TD><A name=19><FONT size=+3><B>19</B></FONT></A> </TD>
    <TD><FONT size=+1><B>Mirror, Mirror</B></FONT><BR><I>50 points</I> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp; Create an HTML form without buttons. Include 
      a title and heading of "Mirror, Mirror on the wall." Provide one text 
      field with the text of your question to the mirror (e.g., "Who is the best 
      programmer of them all?"). Provide two radio buttons, each one labeled 
      with possible answers. One is labeled that you are the best (this one is 
      selected) and the other is labeled that you are the worst. Use JavaScript 
      to prevent the user from making <B>any</B> changes, regardless how 
      temporary, to the default values. 
      <P></P></TD></TR></TBODY></TABLE>
<HR>

<TABLE>
  <TBODY>
  <TR vAlign=bottom>
    <TD><FONT size=-1><B><A 
      href="http://emp.byui.edu/twitchellk/default.htm">Kevin E. 
      Twitchell</A></B><BR><A href="http://www.byui.edu/">BYU-Idaho</A><BR>215 
      Austin Building<BR>Rexburg, ID 83460-1015<BR></FONT></TD>
    <TD></TD>
    <TD><FONT size=-1><A 
      href="mailto:TwitchellK@byui.edu">TwitchellK@byui.edu</A><BR>208-496-1938 
      voice<BR>208-496-5938 fax </FONT></TD></TR></TBODY></TABLE></BODY></HTML>
